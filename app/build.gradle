apply plugin: 'com.android.application'
def bakPath = file("${buildDir}/bakApk")   //指定基准文件存放位置
android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.hisuchina.tinkertest"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "$VERSTION_NAME"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    signingConfigs {
        releaseConfig {
            keyAlias 'xiaobaima'
            keyPassword 'xiaobaima'
            storeFile file('tinker.jks')
            storePassword 'xiaobaima'
        }
    }


    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    //optional, help to generate the final application
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}")
    //tinker's main Android lib
    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}")
    compile "com.android.support:multidex:1.0.1"
}

ext{
    tinkerEnable = true
    tinkerOldApkPath = "${bakPath}/app-release-0228-18-02-25.apk"
    tinkerId = "$VERSTION_NAME"
    tinkerApplyMappingPath = "${bakPath}/app-release-0228-18-02-25-mapping.txt"
    tinkerApplyResourcePath = "${bakPath}/app-release-0228-18-02-25-R.txt"
}

def buildWithTinker(){
    return ext.tinkerEnable
}

def getOldApkPath(){
    return ext.tinkerOldApkPath
}

def getApplyMappingPath(){
    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath(){
    return ext.tinkerApplyResourcePath
}

def getTinkerIdValue(){
    return ext.tinkerId
}

if(buildWithTinker()){
    //启用tinker
    apply plugin: 'com.tencent.tinker.patch'
    //所有tinker相关参数的配置
    tinkerPatch{
        oldApk = getOldApkPath()  //指定old apk的路径

        ignoreWarning = false //不忽略警告,有警告则终止patch文件的生成

        useSign = true //强制patch文件也使用签名

        tinkerEnable = buildWithTinker() //制定是否启用tinker

        buildConfig {
            applyMapping = getApplyMappingPath() //指定old apk打包时所使用的混淆文件

            applyResourceMapping = getApplyResourceMappingPath()  //指定old apk的资源文件

            tinkerId = getTinkerIdValue() //指定tinker ID

            keepDexApply = false
        }

        dex {
            dexMode = "jar"
            pattern = ["classes*.dex","assets/secondary-dex-?.jar"] //指定dex文件目录
            loader = ["com.hisuchina.tinkertest.application.MyTinkerApplication"]  //指定加载patch文件时用到的类
        }

        lib {
            pattern = ["libs/*/*.so"]
        }

        res {
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            //ignoreChange = ["xxx"]  //指定不受影响的资源路径
            largeModSize = 100  //资源修改大小的默认值
        }

//        packageConfig {
//            configField("patchMessage", "fix the 1.0 version's bugs")
//            configField("patchVersion", "1.0")
//        }

    }

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("MMdd-HH-mm-ss")

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.first().outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }

}

